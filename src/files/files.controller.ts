import { Controller, Get, HttpStatus, Param, Post, Res, StreamableFile, UploadedFile, UploadedFiles, UseInterceptors } from '@nestjs/common'import { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express'import { Response } from 'express'import * as fs from 'fs'import { diskStorage } from 'multer'import { extname, join } from 'path'import * as process from 'process'import { FilesService } from './services/files.service'@Controller('images')export class FilesController {	constructor(private filesService: FilesService) {}	@Post('product/:id')	@UseInterceptors(		FilesInterceptor('file', 10, {			storage: diskStorage({				destination: (req, file, callback) => {					console.log(req.params)					const path = `../images/products/${req.params.id}`					if (!fs.existsSync(path)) {						fs.mkdirSync(path, { recursive: true })					}					callback(null, path)				},				filename: (req, file, callback) => {					const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9)					const ext = extname(file.originalname)					callback(null, `${file.originalname}-${uniqueSuffix}${ext}`)				},			}),		}),	)	async uploadProductImage(@UploadedFiles() file: Express.Multer.File) {		console.log(file)	}	@Post('sale/:id')	@UseInterceptors(		FileInterceptor('file', {			storage: diskStorage({				destination: (req, file, callback) => {					const path = `../images/sales/${req.params.id}`					if (!fs.existsSync(path)) {						fs.mkdirSync(path, { recursive: true })					}					callback(null, path)				},				filename: (req, file, callback) => {					const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9)					const ext = extname(file.originalname)					callback(null, `${file.originalname}-${uniqueSuffix}${ext}`)				},			}),		}),	)	async uploadSaleImage(@Res() res: Response, @Param('id') id: string, @UploadedFile() file: Express.Multer.File) {		await this.filesService.addImage(id, file.filename)		return res.status(HttpStatus.OK)	}	@Get('sale/:id/:name')	async getSaleImage(@Param() params: { id: string; name: string }) {		const file = fs.createReadStream(join(process.cwd(), '../images/sales/' + params.id + '/' + params.name))		return new StreamableFile(file)	}	@Get('product/:id/:name')	async getProductImage(@Param() params: { id: string; name: string }) {		const file = fs.createReadStream(join(process.cwd(), '../images/products/' + params.id + '/' + params.name))		return new StreamableFile(file)	}}