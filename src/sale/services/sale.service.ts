import {HttpException, Injectable} from '@nestjs/common'import {InjectRepository} from '@nestjs/typeorm'import {Repository} from 'typeorm'import {Product} from '../../products/product.entity'import {ProductService} from '../../products/product.service'import {SaleDto} from '../dto/sale.dto'import {Sale} from '../sale.entity'@Injectable()export class SaleService {    constructor(@InjectRepository(Sale) private saleRepository: Repository<Sale>, private productService: ProductService) {    }    async findAll(): Promise<Sale[]> {        return await this.saleRepository.find({            relations: {                products: true            }        })    }    async getSaleById(id: string): Promise<Sale | null> {        return await this.saleRepository.findOne({            relations: {                products: true            },            where: {id}        })    }    async addSale(data: SaleDto) {        const products: Product[] = []        for (const productId of data.products) {            const product: Product | null = await this.productService.getProductById(productId)            if (product) {                products.push(product)            }        }        const sale: Sale = {            name: data.name,            discount: data.discount,            image: data.image,            products,        }        return await this.saleRepository.save(sale)    }    async updateSale(data: SaleDto, id: string) {        const products: Product[] = []        for (const productId of data.products) {            const product: Product | null = await this.productService.getProductById(productId)            if (product) {                products.push(product)            }        }        const sale = await this.saleRepository.findOne({            relations: {                products: true            },            where: {id}        })        if (sale) {            sale.name = data.name            sale.discount = data.discount            sale.image = data.image            sale.products = products            return await this.saleRepository.save(sale)        } else {            return new HttpException("Акция не найдена", 500)        }    }}