import { Injectable } from '@nestjs/common'import { InjectRepository } from '@nestjs/typeorm'import { Like, MoreThan, Repository } from 'typeorm'import { GetProductsDto } from './dto/get-products-dto'import { Product } from './product.entity'@Injectable()export class ProductService {	constructor(@InjectRepository(Product) private productRepository: Repository<Product>) {}	getProducts(params: GetProductsDto) {		switch (params.mainCategory) {			case 'Смесители для ванной комнаты и душевых кабин':				if (params.subCategory) {					return this.productRepository.findAndCount({						where: {							nasnacheniy: params.subCategory,							price: MoreThan(0),						},						skip: Number(params.offset),						take: Number(params.limit),					})				} else {					return this.productRepository.findAndCount({						where: [							{								nasnacheniy: 'Ванна двухрукояточный',								price: MoreThan(0),							},							{								nasnacheniy: 'Ванна литой корпус',								price: MoreThan(0),							},							{								nasnacheniy: 'Ванна однорукояточный',								price: MoreThan(0),							},							{								nasnacheniy: 'Ванна с дайвотером',								price: MoreThan(0),							},						],						skip: Number(params.offset),						take: Number(params.limit),					})				}			case 'Гибкие соединения':				if (params.subCategory) {					return this.productRepository.findAndCount({						where: {							nasnacheniy: params.subCategory,							price: MoreThan(0),						},						skip: Number(params.offset),						take: Number(params.limit),					})				} else {					return this.productRepository.findAndCount({						where: [							{								nasnacheniy: 'Гигант',								price: MoreThan(0),							},							{								nasnacheniy: 'Для воды',								price: MoreThan(0),							},							{								nasnacheniy: 'Для смесителя',								price: MoreThan(0),							},							{								nasnacheniy: 'Заливной',								price: MoreThan(0),							},						],						skip: Number(params.offset),						take: Number(params.limit),					})				}			case 'Комплектация':				return this.productRepository.findAndCount({					where: {						nasnacheniy: params.mainCategory,						price: MoreThan(0),					},					skip: Number(params.offset),					take: Number(params.limit),				})			case 'Душевая система':				return this.productRepository.findAndCount({					where: {						nasnacheniy: params.mainCategory,						price: MoreThan(0),					},					skip: Number(params.offset),					take: Number(params.limit),				})			case 'Душевая стойка':				return this.productRepository.findAndCount({					where: {						nasnacheniy: params.mainCategory,						price: MoreThan(0),					},					skip: Number(params.offset),					take: Number(params.limit),				})			case 'Шланг душевой':				return this.productRepository.findAndCount({					where: {						nasnacheniy: params.mainCategory,						price: MoreThan(0),					},					skip: Number(params.offset),					take: Number(params.limit),				})			default:				return this.productRepository.findAndCount({					where: {						nasnacheniy: params.mainCategory,						upravlenie: Like(`%${params.subCategory}%`),						price: MoreThan(0),					},					skip: Number(params.offset),					take: Number(params.limit),				})		}	}	getProductById(id: string) {		return this.productRepository.findOneBy({ guid: id })	}	async getProductByArticle(article: string) {		return this.productRepository.findAndCount({			where: { articul: article },			take: 10,		})	}	async updateProductById(id: string, data: any) {		return this.productRepository.update({ guid: id }, data)	}}